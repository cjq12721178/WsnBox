package com.weisi.tool.wsnbox.activity.data_browse

//import com.cjq.lib.weisi.node.Sensor
import android.os.Bundle
import android.os.Handler
import android.os.Message
import android.support.v7.widget.RecyclerView
import android.view.View
import com.cjq.lib.weisi.iot.PhysicalSensor
import com.cjq.lib.weisi.iot.ValueContainer
import com.cjq.tool.qbox.ui.adapter.AdapterDelegate
import com.cjq.tool.qbox.ui.adapter.AutoGeneratedAdapterDelegateManager
import com.cjq.tool.qbox.ui.dialog.FilterDialog
import com.cjq.tool.qbox.ui.dialog.SearchDialog
import com.cjq.tool.qbox.ui.dialog.SortDialog
import com.weisi.tool.wsnbox.adapter.MultipleMeasurementSensorAdapterDelegate
import com.weisi.tool.wsnbox.adapter.SingleMeasurementSensorAdapterDelegate
import com.weisi.tool.wsnbox.bean.storage.DataBrowseSensorStorage
import com.weisi.tool.wsnbox.bean.warner.processor.CommonWarnProcessor
import com.weisi.tool.wsnbox.fragment.SensorInformationFragment
import com.weisi.tool.wsnbox.service.DataPrepareService

/**
 * Created by CJQ on 2018/3/15.
 */
class SensorVisualMode : VisualMode {

    private val MSG_SENSOR_NET_IN = 1
    private val MSG_SENSOR_VALUE_UPDATE = 2

    private val ARGUMENT_KEY_SELECTED_SENSOR_ADDRESS = "selected_sensor"
    private val ARGUMENT_KEY_SELECTED_SENSOR_INDEX = "selected_index"
    private val ARGUMENT_KEY_SENSOR_STORAGE = "sensor_storage"

    private lateinit var mSensorStorage: DataBrowseSensorStorage
    private var mSensorAdapter = initAdapter()
    private var mSortDialog: SortDialog? = null
    private var mFilterDialog: FilterDialog? = null
    private var mSearchDialog: SearchDialog? = null
    private var mRvSensors: RecyclerView? = null
    private var mSensorInformationFragment: SensorInformationFragment? = null
    private var mTaskRunning: Boolean = false

    private val mEventHandler = object : Handler() {

        override fun handleMessage(msg: Message) {
            when (msg.what) {
                MSG_SENSOR_NET_IN -> {
                    addSensor(msg.obj as PhysicalSensor)
                }
                MSG_SENSOR_VALUE_UPDATE -> {
                    val sensor = msg.obj as PhysicalSensor
                    val measurementValuePosition = msg.arg1
                    val isRealTime = mSensorStorage.dataSource
                    if (!isRealTime) {
                        if (sensor.historyValueContainer.interpretAddResult(measurementValuePosition) != ValueContainer.NEW_VALUE_ADDED) {
                            return
                        }
                    }
                    val position = mSensorStorage.findSensor(sensor)
                    if (position >= 0) {
                        //mSensorAdapter.notifySensorValueUpdate(position)
                        if (mSensorInformationFragment != null) {
                            //mSensorInformationFragment.notifySensorDynamicValueChanged(sensor, measurementValuePosition)
                        }
                    }
                }
                else -> {
                }
            }
        }
    }

    private fun addSensor(sensor: PhysicalSensor) {
        //根据设置有序添加
        val position = mSensorStorage.addSensor(sensor)
        if (position != -1) {
            //mSensorAdapter.notifySensorNetIn(position)
        }
    }

    override fun onCreate(activity: DataBrowseActivity, savedInstanceState: Bundle?) {
        //以下三个方法的次序不能改变
        establishSensorStorage(savedInstanceState)
        recoverSensorInformationDialog(activity, savedInstanceState)
        initAdapter()
    }

    private fun initAdapter() {
        //创建DataBrowseSensorAdapter
        val delegateManager = object : AutoGeneratedAdapterDelegateManager<PhysicalSensor>() {
            protected override fun onCreateAdapterDelegate(viewType: Int): AdapterDelegate<PhysicalSensor> {
                return MultipleMeasurementSensorAdapterDelegate(viewType)
            }
        }
        delegateManager.addAdapterDelegate(SingleMeasurementSensorAdapterDelegate())
        //mSensorAdapter = DataBrowseSensorAdapter(delegateManager, mSensorStorage)
    }

    private fun establishSensorStorage(savedInstanceState: Bundle?) {
        if (savedInstanceState != null) {
            mSensorStorage = savedInstanceState.getParcelable(ARGUMENT_KEY_SENSOR_STORAGE)
        } else {
            mSensorStorage = DataBrowseSensorStorage(true)
            mSensorStorage.setSorter(DataBrowseSensorStorage.SORTED_BY_TIME, false)
        }
    }

    private fun recoverSensorInformationDialog(activity: DataBrowseActivity, savedInstanceState: Bundle?) {
        if (savedInstanceState != null) {
            mSensorInformationFragment = activity.supportFragmentManager
                    .findFragmentByTag(SensorInformationFragment.TAG) as SensorInformationFragment
            if (mSensorInformationFragment != null) {
                //mSensorInformationFragment?.setSensor(getSavedSelectedSensor(savedInstanceState))
                mSensorInformationFragment?.setRealTime(mSensorStorage.getDataSource())
            }
        }
    }

    override fun onDataSourceMenuItemClick(realTime: Boolean) {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun onSaveInstanceState(outState: Bundle?) {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun onDestroy() {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun onServiceConnectionCreate(service: DataPrepareService) {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun onServiceConnectionStart(service: DataPrepareService) {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun onServiceConnectionStop(service: DataPrepareService) {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun onServiceConnectionDestroy(service: DataPrepareService) {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun onValueContainerConfigurationsImported(processor: CommonWarnProcessor<View>) {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun onItemClick(v: View, position: Int) {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

//    override fun onSensorNetIn(sensor: PhysicalSensor?) {
//        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
//    }
//
//    override fun onSensorValueUpdate(sensor: PhysicalSensor?, valuePosition: Int) {
//        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
//    }

    override fun onClick(v: View?) {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }
}