package com.weisi.tool.wsnbox.activity.data_browse;

import android.os.AsyncTask;
import android.os.Bundle;
import android.support.annotation.IdRes;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.TextView;

import com.cjq.lib.weisi.iot.LogicalSensor;
import com.cjq.lib.weisi.iot.PhysicalSensor;
import com.cjq.lib.weisi.iot.SensorManager;
import com.cjq.lib.weisi.iot.ValueContainer;
import com.cjq.tool.qbox.ui.adapter.AdapterDelegate;
import com.cjq.tool.qbox.ui.adapter.AutoGeneratedAdapterDelegateManager;
import com.cjq.tool.qbox.ui.decoration.SpaceItemDecoration;
import com.cjq.tool.qbox.ui.dialog.ConfirmDialog;
import com.cjq.tool.qbox.ui.dialog.FilterDialog;
import com.cjq.tool.qbox.ui.dialog.SearchDialog;
import com.cjq.tool.qbox.ui.dialog.SortDialog;
import com.cjq.tool.qbox.ui.gesture.SimpleRecyclerViewItemTouchListener;
import com.weisi.tool.wsnbox.R;
import com.weisi.tool.wsnbox.activity.BaseActivity;
import com.weisi.tool.wsnbox.adapter.BaseSensorAdapterDelegate;
import com.weisi.tool.wsnbox.adapter.DataBrowseSensorAdapter;
import com.weisi.tool.wsnbox.adapter.MultipleMeasurementSensorAdapterDelegate;
import com.weisi.tool.wsnbox.adapter.SensorInfoAdapter;
import com.weisi.tool.wsnbox.adapter.SingleMeasurementSensorAdapterDelegate;
import com.weisi.tool.wsnbox.bean.filter.PhysicalSensorTypeFilter;
import com.weisi.tool.wsnbox.bean.filter.SensorProtocolFilter;
import com.weisi.tool.wsnbox.bean.sorter.SensorSorter;
import com.weisi.tool.wsnbox.bean.storage.DataBrowseSensorStorage;
import com.weisi.tool.wsnbox.bean.warner.executor.browse.ViewBackgroundSingleRangeWarnExecutor;
import com.weisi.tool.wsnbox.bean.warner.executor.browse.ViewBackgroundSwitchWarnExecutor;
import com.weisi.tool.wsnbox.bean.warner.processor.CommonWarnProcessor;
import com.weisi.tool.wsnbox.fragment.SensorInformationFragment;
import com.weisi.tool.wsnbox.io.database.SensorDatabase;
import com.weisi.tool.wsnbox.processor.accessor.SensorHistoryDataAccessor;
import com.weisi.tool.wsnbox.processor.transfer.DataTransferStation;
import com.weisi.tool.wsnbox.service.DataPrepareService;

import org.jetbrains.annotations.NotNull;

import java.util.List;

public class DataBrowseActivity
        extends BaseActivity
        implements View.OnClickListener,
        SortDialog.OnSortTypeChangedListener,
        FilterDialog.OnFilterChangeListener,
        SearchDialog.OnSearchListener,
        DataBrowseSensorStorage.OnSensorDataSourceChangeListener,
        DataBrowseSensorStorage.OnSensorProtocolChangeListener,
        DataBrowseSensorStorage.OnSensorTypeChangeListener,
        DataBrowseSensorStorage.OnSearchKeyWordChangeListener,
        DataTransferStation.OnEventListener, SensorHistoryDataAccessor.OnMissionFinishedListener {

//    private static final int MSG_SENSOR_NET_IN = 1;
//    private static final int MSG_SENSOR_VALUE_UPDATE = 2;

    private static final String ARGUMENT_KEY_SELECTED_SENSOR_ADDRESS = "selected_sensor";
    private static final String ARGUMENT_KEY_SELECTED_SENSOR_INDEX = "selected_index";
    private static final String ARGUMENT_KEY_SENSOR_STORAGE = "sensor_storage";

    private DataBrowseSensorStorage mSensorStorage;
    private DataBrowseSensorAdapter mSensorAdapter;
    private SortDialog mSortDialog;
    private FilterDialog mFilterDialog;
    private SearchDialog mSearchDialog;
    private RecyclerView mRvSensors;
    private SensorInformationFragment mSensorInformationFragment;
    //private boolean mTaskRunning;

//    private final Handler mEventHandler = new Handler() {
//
//        @Override
//        public void handleMessage(Message msg) {
//            switch (msg.what) {
//                case MSG_SENSOR_NET_IN: {
//                    addSensor((PhysicalSensor) msg.obj);
//                } break;
//                case MSG_SENSOR_VALUE_UPDATE: {
//                    PhysicalSensor sensor = (PhysicalSensor) msg.obj;
//                    int measurementValuePosition = msg.arg1;
//                    boolean isRealTime = mSensorStorage.getDataSource();
//                    if (!isRealTime) {
//                        if (sensor.getHistoryValueContainer().interpretAddResult(measurementValuePosition)
//                                != ValueContainer.NEW_VALUE_ADDED) {
//                            return;
//                        }
//                    }
//                    int position = mSensorStorage.findSensor(sensor);
//                    if (position >= 0) {
//                        mSensorAdapter.notifySensorValueUpdate(position);
//                        if (mSensorInformationFragment != null) {
//                            mSensorInformationFragment.notifySensorDynamicValueChanged(sensor, measurementValuePosition);
//                        }
//                    }
//                } break;
//                default:
//                    break;
//            }
//        }
//    };

    //private VisualMode mVisualMode;

    private void addSensor(PhysicalSensor sensor) {
        //根据设置有序添加
        int position = mSensorStorage.addSensor(sensor);
        if (position != -1) {
            mSensorAdapter.notifySensorNetIn(position);
        }
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_data_browse);
        bindView();

        //mVisualMode = new SensorVisualMode();
        //mVisualMode.onCreate(savedInstanceState);
        //以下三个方法的次序不能改变
        establishSensorStorage(savedInstanceState);
        recoverSensorInformationDialog(savedInstanceState);
        initAdapter();

        if (savedInstanceState == null) {
            importSensorConfigurations();
        }
    }

    private void importSensorConfigurations() {
        long id = getBaseApplication().getSettings().getDataBrowseValueContainerConfigurationProviderId();
        if (id > 0) {
            ImportSensorConfigurationsTask task = new ImportSensorConfigurationsTask();
            task.execute(id);
        }
    }

    private void bindView() {
        findViewById(R.id.tv_sort).setOnClickListener(this);
        findViewById(R.id.tv_filter).setOnClickListener(this);
        findViewById(R.id.tv_search).setOnClickListener(this);
    }

    private void initAdapter() {
        //创建DataBrowseSensorAdapter
        AutoGeneratedAdapterDelegateManager delegateManager = new AutoGeneratedAdapterDelegateManager() {
            @Override
            protected AdapterDelegate onCreateAdapterDelegate(int viewType) {
                return new MultipleMeasurementSensorAdapterDelegate(viewType);
            }
        };
        delegateManager.addAdapterDelegate(new SingleMeasurementSensorAdapterDelegate());
        mSensorAdapter = new DataBrowseSensorAdapter(delegateManager, mSensorStorage);
    }

    private void establishSensorStorage(Bundle savedInstanceState) {
        if (savedInstanceState != null) {
            mSensorStorage = savedInstanceState.getParcelable(ARGUMENT_KEY_SENSOR_STORAGE);
        } else {
            mSensorStorage = new DataBrowseSensorStorage(true);
            mSensorStorage.setSorter(DataBrowseSensorStorage.SORTED_BY_TIME, false);
        }
    }

    private void recoverSensorInformationDialog(Bundle savedInstanceState) {
        if (savedInstanceState != null) {
            mSensorInformationFragment = (SensorInformationFragment) getSupportFragmentManager()
                    .findFragmentByTag(SensorInformationFragment.TAG);
            if (mSensorInformationFragment != null) {
                mSensorInformationFragment.setSensor(getSavedSelectedSensor(savedInstanceState));
                mSensorInformationFragment.setRealTime(mSensorStorage.getDataSource());
            }
        }
    }

    private PhysicalSensor getSavedSelectedSensor(Bundle savedInstanceState) {
        int selectedAddress = savedInstanceState.getInt(ARGUMENT_KEY_SELECTED_SENSOR_ADDRESS);
        if (selectedAddress == -1) {
            return null;
        }
        return SensorManager.getPhysicalSensor(selectedAddress, false);
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_data_browse, menu);
        setDataSourceLabel(menu.findItem(R.id.mi_data_source));
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.mi_data_source:
                if (mSensorStorage.getSensorSize() > 0) {
                    mRvSensors.scrollToPosition(0);
                }
                mSensorStorage.setDataSource(!mSensorStorage.getDataSource(), this);
                setDataSourceLabel(item);
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    private void setDataSourceLabel(MenuItem item) {
        item.setTitle(getString(mSensorStorage.getDataSource()
                ? R.string.real_time
                : R.string.history));
    }

    @Override
    protected void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        outState.putInt(ARGUMENT_KEY_SELECTED_SENSOR_INDEX, mSensorAdapter.getSelectedIndex());
        PhysicalSensor selectedSensor = mSensorInformationFragment != null
                ? mSensorInformationFragment.getSensor()
                : null;
        outState.putInt(ARGUMENT_KEY_SELECTED_SENSOR_ADDRESS,
                selectedSensor != null
                        ? selectedSensor.getRawAddress()
                        : -1);
        outState.putParcelable(ARGUMENT_KEY_SENSOR_STORAGE, mSensorStorage);
    }

    @Override
    protected void onDestroy() {
        //释放配置资源
        BaseSensorAdapterDelegate.setWarnProcessor(null);
        super.onDestroy();
        //防止内存泄漏
        //mEventHandler.removeCallbacksAndMessages(null);
    }

    @Override
    public void onServiceConnectionCreate(DataPrepareService service) {
        service.getDataTransferStation().register(this);
        mSensorStorage.commitDataSourceChange(this);
        initSensorBrowseInterface();
    }

//    private void importSensorsWithHistoryValue() {
//        if (mTaskRunning) {
//            return;
//        }
//        mTaskRunning = true;
//        ImportSensorsWithEarliestValueTask task = new ImportSensorsWithEarliestValueTask();
//        task.execute();
//    }

    @Override
    public void onServiceConnectionStart(DataPrepareService service) {
        if (mSensorStorage.getDataSource()) {
            //service.startSensorValueUpdater(this);
            service.getDataTransferStation().setEnableDetectPhysicalSensorValueUpdate(true);
        }
    }

    @Override
    public void onServiceConnectionStop(DataPrepareService service) {
        if (mSensorStorage.getDataSource()) {
            //service.stopSensorValueUpdater();
            service.getDataTransferStation().setEnableDetectPhysicalSensorValueUpdate(false);
        }
    }

    @Override
    public void onServiceConnectionDestroy(DataPrepareService service) {
        if (mSensorStorage.getDataSource()) {
            //service.setOnSensorNetInListener(null);
            service.getDataTransferStation().setEnableDetectPhysicalSensorNetIn(false);
        }
        service.getDataTransferStation().unregister(this);
    }

    private void initSensorBrowseInterface() {
        mRvSensors = findViewById(R.id.rv_sensors);
        LinearLayoutManager linearLayoutManager = new LinearLayoutManager(this);
        mRvSensors.setLayoutManager(linearLayoutManager);
        mRvSensors.addItemDecoration(new SpaceItemDecoration(getResources().getDimensionPixelSize(R.dimen.margin_small), true));
        mRvSensors.addOnItemTouchListener(new SimpleRecyclerViewItemTouchListener(mRvSensors) {
            @Override
            public void onItemClick(View v, int position) {
                PhysicalSensor sensor = mSensorAdapter.getItemByPosition(position);
                if (mSensorInformationFragment == null) {
                    mSensorInformationFragment = new SensorInformationFragment();
                }
                mSensorInformationFragment.show(getSupportFragmentManager(),
                        sensor,
                        mSensorStorage.getDataSource());
                getDataPrepareService().getDataTransferStation().payAttentionToSensor(sensor);
            }
        });
        mRvSensors.setAdapter(mSensorAdapter);
    }

//    @Override
//    public void onSensorNetIn(PhysicalSensor sensor) {
//        notifyAdapterSensorNetIn(sensor);
//    }

//    private void notifyAdapterSensorNetIn(PhysicalSensor sensor) {
//        Message message = Message.obtain();
//        message.what = MSG_SENSOR_NET_IN;
//        message.obj = sensor;
//        mEventHandler.sendMessage(message);
//    }

//    @Override
//    public void onSensorValueUpdate(PhysicalSensor sensor, int valuePosition) {
//        notifyAdapterSensorValueUpdate(sensor, valuePosition);
//    }

//    private void notifyAdapterSensorValueUpdate(PhysicalSensor sensor, int valuePosition) {
//        Message message = Message.obtain();
//        message.what = MSG_SENSOR_VALUE_UPDATE;
//        message.obj = sensor;
//        message.arg1 = valuePosition;
//        mEventHandler.sendMessage(message);
//    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.tv_sensor_name_address:
                BaseSensorAdapterDelegate.setShowSensorNameOrAddress(setListHeadSensorNameOrAddress((TextView) v));
                mSensorAdapter.notifySensorLabelChanged();
                break;
            case R.id.tv_measurement_name_type:
                BaseSensorAdapterDelegate.setShowMeasurementNameOrType(setListHeadMeasurementNameOrType((TextView) v));
                mSensorAdapter.notifyMeasurementLabelChanged();
                break;
            case R.id.tv_sort:
                if (mSortDialog == null) {
                    mSortDialog = new SortDialog();
                    mSortDialog.addSortType(R.id.rb_address, R.string.address, this)
                            .addSortType(R.id.rb_time, R.string.timestamp, this)
                            .setDefaultSelectedId(mSensorStorage.getSensorSortType() == DataBrowseSensorStorage.SORTED_BY_TIME ? R.id.rb_time : R.id.rb_address);
                }
                mSortDialog.show(getSupportFragmentManager(), "sort_dialog");
                break;
            case R.id.tv_filter:
                if (mFilterDialog == null) {
                    mFilterDialog = new FilterDialog();
                    mFilterDialog.addFilterType(
                            getString(R.string.sensor_protocol),
                            getResources().getStringArray(R.array.usb_protocols),
                            getSensorProtocolFilterStates());
                    mFilterDialog.addFilterType(
                            getString(R.string.sensor_type),
                            PhysicalSensorTypeFilter.getSensorTypeNames(),
                            getSensorTypeFilterStates());
                }
                mFilterDialog.show(getSupportFragmentManager(), "filter_dialog");
                break;
            case R.id.tv_search:
                if (mSearchDialog == null) {
                    mSearchDialog = new SearchDialog();
                }
                mSearchDialog.show(getSupportFragmentManager(), "search_dialog");
                break;
        }
    }

    private boolean[] getSensorProtocolFilterStates() {
        switch (mSensorStorage.getSensorProtocolType()) {
            case SensorProtocolFilter.BLE_PROTOCOL:
                return new boolean[] { false, true };
            case SensorProtocolFilter.ESB_PROTOCOL:
                return new boolean[] { true, false };
            case SensorProtocolFilter.ALL_PROTOCOL:
            default:
                return new boolean[] { false, false };
        }
    }

    private boolean[] getSensorTypeFilterStates() {
        List<Integer> selectedSensorTypeNos = mSensorStorage.getSensorTypeNos();
        if (selectedSensorTypeNos == null || selectedSensorTypeNos.isEmpty()) {
            return null;
        }
        boolean[] result = new boolean[PhysicalSensorTypeFilter.getSensorTypeNames().length];
        for (Integer selectedSensorTypeNo
                : selectedSensorTypeNos) {
            result[selectedSensorTypeNo] = true;
        }
        return result;
    }

    private boolean setListHeadSensorNameOrAddress(TextView tvSensorNameAddress) {
        String sensorNameLabel = getString(R.string.sensor_name);
        if (sensorNameLabel.equals(tvSensorNameAddress.getText())) {
            tvSensorNameAddress.setText(getString(R.string.sensor_address));
            return false;
        } else {
            tvSensorNameAddress.setText(sensorNameLabel);
            return true;
        }
    }

    private boolean setListHeadMeasurementNameOrType(TextView tvMeasurementNameType) {
        String measurementNameLabel = getString(R.string.measurement_name);
        if (measurementNameLabel.equals(tvMeasurementNameType.getText())) {
            tvMeasurementNameType.setText(getString(R.string.measurement_type));
            return false;
        } else {
            tvMeasurementNameType.setText(measurementNameLabel);
            return true;
        }
    }

    @Override
    public void onSortTypeChanged(@IdRes int checkedId, boolean isAscending) {
        switch (checkedId) {
            case R.id.rb_address:
                mSensorStorage.setSorter(DataBrowseSensorStorage.SORTED_BY_ADDRESS, !isAscending, this);
                break;
            case R.id.rb_time:
                mSensorStorage.setSorter(DataBrowseSensorStorage.SORTED_BY_TIME, !isAscending, this);
                break;
            default:
                break;
        }
    }

    @Override
    public void onSensorSizeChange(int previousSize, int currentSize) {
        mSensorAdapter.notifySensorFilterChanged(previousSize, currentSize);
    }

    @Override
    public void onSorterChange(SensorSorter newSorter) {
        mSensorAdapter.notifySensorOrderChanged();
    }

    @Override
    public void onOrderChange(boolean newOrder) {
        mSensorAdapter.notifySensorOrderChanged();
    }

    @Override
    public void onDataSourceChange(boolean isRealTime) {
        BaseSensorAdapterDelegate.setRealTime(isRealTime);
        DataTransferStation transfer = getDataPrepareService().getDataTransferStation();
        if (isRealTime) {
            transfer.setEnableDetectPhysicalSensorNetIn(true);
            transfer.setEnableDetectPhysicalSensorValueUpdate(true);
            transfer.setEnableDetectPhysicalSensorHistoryValueReceive(false);
            transfer.setEnableDetectLogicalSensorHistoryValueReceive(false);
//            service.setOnSensorNetInListener(this);
//            service.startSensorValueUpdater(this);
        } else {
//            service.setOnSensorNetInListener(null);
//            service.stopSensorValueUpdater();
            transfer.setEnableDetectPhysicalSensorNetIn(false);
            transfer.setEnableDetectPhysicalSensorValueUpdate(false);
            transfer.setEnableDetectPhysicalSensorHistoryValueReceive(true);
            transfer.setEnableDetectLogicalSensorHistoryValueReceive(true);
            getDataPrepareService().getSensorHistoryDataAccessor().importSensorsWithEarliestValue(this);
            //importSensorsWithHistoryValue();
        }
    }

    @Override
    public void onFilterChange(FilterDialog dialog, boolean[] hasFilters, List<Integer>[] checkedFilterEntryValues) {
        //筛选协议
        if (hasFilters[0]) {
            if (checkedFilterEntryValues[0].get(0) == 0) {
                mSensorStorage.setSensorProtocol(SensorProtocolFilter.ESB_PROTOCOL, this);
            } else {
                mSensorStorage.setSensorProtocol(SensorProtocolFilter.BLE_PROTOCOL, this);
            }
        } else {
            mSensorStorage.setSensorProtocol(SensorProtocolFilter.ALL_PROTOCOL, this);
        }
        //筛选类型
        if (hasFilters[1]) {
            mSensorStorage.setSensorType(checkedFilterEntryValues[1], this);
        } else {
            mSensorStorage.setSensorType(null, this);
        }
    }

    @Override
    public void onSearch(String target) {
        mSensorStorage.setSearchContent(target, this);
    }

    @Override
    public void onSensorProtocolChange(int protocolType) {
    }

    @Override
    public void onSensorTypeChange(List<Integer> sensorTypeNos) {
    }

    @Override
    public void onSearchKeyWordChange(String keyWord) {

    }

    @Override
    public void onPhysicalSensorNetIn(@NotNull PhysicalSensor sensor) {
        addSensor(sensor);
    }

    @Override
    public void onPhysicalSensorDynamicValueUpdate(@NotNull PhysicalSensor sensor, int logicalPosition) {
//        boolean isRealTime = mSensorStorage.getDataSource();
//        if (!isRealTime) {
//            if (sensor.getHistoryValueContainer().interpretAddResult(logicalPosition)
//                    != ValueContainer.NEW_VALUE_ADDED) {
//                return;
//            }
//        }
        notifySensorValueUpdate(sensor, logicalPosition);
    }

    private void notifySensorValueUpdate(@NotNull PhysicalSensor sensor, int valuePosition) {
        int position = mSensorStorage.findSensor(sensor);
        if (position >= 0) {
            mSensorAdapter.notifySensorValueUpdate(position);
            if (mSensorInformationFragment != null) {
                mSensorInformationFragment.notifySensorValueChanged(sensor, valuePosition);
            }
        }
    }

    @Override
    public void onLogicalSensorNetIn(@NotNull LogicalSensor sensor) {

    }

    @Override
    public void onLogicalSensorDynamicValueUpdate(@NotNull LogicalSensor sensor, int logicalPosition) {

    }

    @Override
    public void onPhysicalSensorHistoryValueUpdate(@NotNull PhysicalSensor sensor, int logicalPosition) {
        if (logicalPosition == 0) {
            if (sensor.getHistoryValueContainer()
                    .interpretAddResult(logicalPosition)
                    == ValueContainer.NEW_VALUE_ADDED) {
                addSensor(sensor);
            }
        } else {
            if (mSensorInformationFragment != null) {
                mSensorInformationFragment.notifySensorValueChanged(sensor, logicalPosition);
            }
        }
    }

    @Override
    public void onLogicalSensorHistoryValueUpdate(@NotNull LogicalSensor sensor, int logicalPosition) {
        LogicalSensor.Value value = sensor.getValueByContainerAddMethodReturnValue(sensor.getHistoryValueContainer(), logicalPosition);
        if (value != null) {
            PhysicalSensor physicalSensor = sensor.getPhysicalSensor();
            int position = physicalSensor.getHistoryValueContainer().findValuePosition(logicalPosition, value.getTimestamp());
            if (position >= 0) {
                if (logicalPosition == 0) {
                    notifySensorValueUpdate(physicalSensor, position);
                }
                if (mSensorInformationFragment != null) {
                    mSensorInformationFragment.notifySensorValueChanged(physicalSensor, position);
                }
            }
        }
    }

    @Override
    public void onMissionFinished(boolean result) {
        if (!result) {
            ConfirmDialog dialog = new ConfirmDialog();
            dialog.setTitle(R.string.import_sensor_earliest_value_failed);
            dialog.setDrawCancelButton(false);
            dialog.show(getSupportFragmentManager(),
                    "import_sensor_earliest_value_failed");
        }
        getDataPrepareService().getDataTransferStation().setEnableDetectLogicalSensorHistoryValueReceive(false);
    }

//    private class ImportSensorsWithEarliestValueTask
//            extends AsyncTask<Void, Void, Boolean>
//            implements SensorDatabase.SensorHistoryInfoReceiver {
//
//        private PhysicalSensor mTmpSensor;
//
//        @Override
//        protected Boolean doInBackground(Void... params) {
//            int actualCount = SensorDatabase.getSensorWithHistoryValueCount();
//            if (actualCount == -1) {
//                return false;
//            }
//            if (actualCount == 0 ||
//                    actualCount == SensorManager.getSensorWithHistoryValuesCount(PhysicalSensor.class)) {
//                return true;
//            }
//            return SensorDatabase.importSensorEarliestValue(this);
//        }
//
//        @Override
//        protected void onPostExecute(Boolean result) {
//            mTaskRunning = false;
//            if (!result) {
//                ConfirmDialog dialog = new ConfirmDialog();
//                dialog.setTitle(R.string.import_sensor_earliest_value_failed);
//                dialog.setDrawCancelButton(false);
//                dialog.show(getSupportFragmentManager(),
//                        "import_sensor_earliest_value_failed");
//            }
//        }
//
//        @Override
//        public void onSensorDataReceived(int address, long timestamp, float batteryVoltage) {
//            PhysicalSensor sensor = SensorManager.getPhysicalSensor(address, true);
//            if (!sensor.hasHistoryValue()) {
//                sensor.addPhysicalHistoryValue(timestamp, batteryVoltage);
//                notifyAdapterSensorNetIn(sensor);
//            }
//        }
//
//        @Override
//        public void onMeasurementDataReceived(long measurementValueId, long timestamp, double rawValue) {
//            int address = PhysicalSensor.ID.getAddress(measurementValueId);
//            if (mTmpSensor == null || mTmpSensor.getRawAddress() != address) {
//                mTmpSensor = SensorManager.getPhysicalSensor(address, false);
//            }
//            notifyAdapterSensorValueUpdate(mTmpSensor,
//                    mTmpSensor.addLogicalHistoryValue(measurementValueId,
//                            timestamp, rawValue));
//        }
//    }

    private class ImportSensorConfigurationsTask extends AsyncTask<Long, SensorManager.SensorConfigurationProvider, SensorManager.SensorConfigurationProvider> {

        @Override
        protected SensorManager.SensorConfigurationProvider doInBackground(Long... paras) {
            if (paras == null || paras.length == 0) {
                return null;
            }
            SensorManager.SensorConfigurationProvider provider = SensorDatabase.importValueContainerConfigurationProvider(paras[0]);
            SensorManager.setValueContainerConfigurationProvider(provider, true);
            return provider;
        }

        @Override
        protected void onPostExecute(SensorManager.SensorConfigurationProvider provider) {
            if (provider != null) {
                //创建CommonWarnProcessor
                //注，目前暂时硬编码，之后由设置界面进行修改
                //当前传感器列表界面和单一传感器数据界面使用同一个warnProcessor，
                //以后根据需求可以设置不同的warnProcessor
                CommonWarnProcessor<View> warnProcessor = new CommonWarnProcessor<>();
                warnProcessor.addExecutor(new ViewBackgroundSingleRangeWarnExecutor(
                        DataBrowseActivity.this,
                        android.R.color.holo_red_light,
                        android.R.color.holo_green_light)
                );
                warnProcessor.addExecutor(new ViewBackgroundSwitchWarnExecutor(
                        DataBrowseActivity.this,
                        android.R.color.holo_red_light
                ));
                BaseSensorAdapterDelegate.setWarnProcessor(warnProcessor);
                SensorInfoAdapter.setWarnProcessor(warnProcessor);
                mSensorAdapter.notifyWarnProcessorLoaded();
                if (mSensorInformationFragment != null) {
                    mSensorInformationFragment.notifyWarnProcessorLoaded();
                }
            }
        }
    }
}
