package com.weisi.tool.wsnbox.fragment.browse

import android.os.Bundle
import android.support.v7.widget.LinearLayoutManager
import android.text.TextUtils
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import com.cjq.lib.weisi.data.Filter
import com.cjq.lib.weisi.data.Storage
import com.cjq.lib.weisi.iot.PhysicalSensor
import com.cjq.lib.weisi.iot.PracticalMeasurement
import com.cjq.lib.weisi.iot.Sensor
import com.cjq.lib.weisi.iot.SensorManager
import com.cjq.lib.weisi.iot.container.ValueContainer
import com.cjq.tool.qbox.ui.adapter.AdapterDelegate
import com.cjq.tool.qbox.ui.adapter.AutoGeneratedAdapterDelegateManager
import com.cjq.tool.qbox.ui.decoration.SpaceItemDecoration
import com.cjq.tool.qbox.ui.dialog.ConfirmDialog
import com.cjq.tool.qbox.ui.dialog.FilterDialog
import com.cjq.tool.qbox.ui.dialog.SearchDialog
import com.cjq.tool.qbox.ui.dialog.SortDialog
import com.cjq.tool.qbox.ui.gesture.SimpleRecyclerViewItemTouchListener
import com.weisi.tool.wsnbox.R
import com.weisi.tool.wsnbox.adapter.browse.BaseDataBrowseSensorAdapterDelegate
import com.weisi.tool.wsnbox.adapter.browse.BaseDataBrowseSensorAdapterDelegate.*
import com.weisi.tool.wsnbox.adapter.browse.DataBrowsePhysicalSensorAdapter
import com.weisi.tool.wsnbox.adapter.browse.MultipleMeasurementDataBrowseSensorAdapterDelegate
import com.weisi.tool.wsnbox.adapter.browse.SingleMeasurementDataBrowseSensorAdapterDelegate
import com.weisi.tool.wsnbox.bean.filter.*
import com.weisi.tool.wsnbox.bean.sorter.SensorAddressSorter
import com.weisi.tool.wsnbox.bean.sorter.SensorNameSorter
import com.weisi.tool.wsnbox.bean.sorter.SensorNetInTimeSorter
import com.weisi.tool.wsnbox.fragment.dialog.PhysicalSensorDetailsDialog
import com.weisi.tool.wsnbox.processor.accessor.SensorHistoryDataAccessor
import com.weisi.tool.wsnbox.service.DataPrepareService
import kotlinx.android.synthetic.main.fragment_physical_sensor.view.*
import kotlinx.android.synthetic.main.fragment_sensor_configuration.*

/**
 * Created by CJQ on 2018/5/29.
 */
class PhysicalSensorFragment : DataBrowseFragment<PhysicalSensor, DataBrowsePhysicalSensorAdapter>(),
        View.OnClickListener,
        SensorHistoryDataAccessor.OnMissionFinishedListener {

    //private lateinit var rvSensors: RecyclerView
    //private var physicalSensorInfoDialog: PhysicalSensorInfoDialog? = null

    override fun onCreateStorage(): Storage<PhysicalSensor> {
        val s = Storage<PhysicalSensor> { elements, filters ->
            SensorManager.getSensors(elements, filters, PhysicalSensor::class.java)
        }
        s.addFilter(FILTER_ID_DATA_SOURCE, SensorHasValueFilter())
        s.setSorter(SensorNetInTimeSorter(), false)
        return s
    }

//    override fun onRecoverInformationDialog(savedInstanceState: Bundle?) {
//        savedInstanceState ?: return
//        physicalSensorInfoDialog = childFragmentManager
//                .findFragmentByTag(SensorInfoDialog.TAG) as PhysicalSensorInfoDialog?
//                ?: return
//    }

//    private fun getSavedSelectedSensor(savedInstanceState: Bundle): PhysicalSensor? {
//        val selectedAddress = savedInstanceState.getInt(ARGUMENT_KEY_SELECTED_SENSOR_ADDRESS)
//        return if (selectedAddress == -1) {
//            null
//        } else SensorManager.getPhysicalSensor(selectedAddress, false)
//    }

    override fun onInitView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {
        return inflater.inflate(R.layout.fragment_physical_sensor, null)
    }

    override fun onInitAdapter(view: View, storage: Storage<PhysicalSensor>): DataBrowsePhysicalSensorAdapter {
        //绑定事件
        view.findViewById<TextView>(R.id.tv_sensor_name_address).setOnClickListener(this)
        view.findViewById<TextView>(R.id.tv_measurement_name_type).setOnClickListener(this)

        //初始化RecycleView
        //rvSensors = view.findViewById(R.id.rv_sensors)
        view.rv_sensors.layoutManager = LinearLayoutManager(context)
        view.rv_sensors.addItemDecoration(SpaceItemDecoration(resources.getDimensionPixelSize(R.dimen.margin_small), true))
        view.rv_sensors.addOnItemTouchListener(object : SimpleRecyclerViewItemTouchListener(view.rv_sensors) {
            override fun onItemClick(v: View, position: Int) {
                val sensor = adapter.getItemByPosition(position)
                val dialog = PhysicalSensorDetailsDialog()
                dialog.init(sensor)
                dialog.show(childFragmentManager, DIALOG_TAG_INFO)
//                if (physicalSensorInfoDialog == null) {
//                    physicalSensorInfoDialog = PhysicalSensorInfoDialog()
//                }
//                getBaseActivity().dataPrepareService.dataTransferStation.payAttentionToSensor(sensor)
//                physicalSensorInfoDialog!!.show(childFragmentManager,
//                        sensor,
//                        isRealTime())
            }
        })

        //创建DataBrowseSensorAdapter
        val delegateManager = object : AutoGeneratedAdapterDelegateManager<PhysicalSensor>() {
            override fun onCreateAdapterDelegate(viewType: Int): AdapterDelegate<PhysicalSensor> {
                return MultipleMeasurementDataBrowseSensorAdapterDelegate(viewType)
            }
        }
        delegateManager.addAdapterDelegate(SingleMeasurementDataBrowseSensorAdapterDelegate())
        val sensorAdapter = DataBrowsePhysicalSensorAdapter(delegateManager, storage)
        view.rv_sensors.adapter = sensorAdapter
        return sensorAdapter
    }

    override fun onClick(v: View?) {
        when (v?.id) {
            R.id.tv_sensor_name_address -> {
                BaseDataBrowseSensorAdapterDelegate.setShowSensorNameOrAddress(setListHeadSensorNameOrAddress(v as TextView))
                adapter.notifyItemRangeChanged(0, adapter.getItemCount(),
                        UPDATE_TYPE_SENSOR_LABEL_CHANGED)
            }
            R.id.tv_measurement_name_type -> {
                BaseDataBrowseSensorAdapterDelegate.setShowMeasurementNameOrType(setListHeadMeasurementNameOrType(v as TextView))
                adapter.notifyItemRangeChanged(0, adapter.getItemCount(),
                        UPDATE_TYPE_MEASUREMENT_LABEL_CHANGED)
            }
        }
    }

    private fun setListHeadSensorNameOrAddress(tvSensorNameAddress: TextView): Boolean {
        val sensorNameLabel = getString(R.string.sensor_name)
        if (sensorNameLabel == tvSensorNameAddress.text) {
            tvSensorNameAddress.text = getString(R.string.sensor_address)
            return false
        } else {
            tvSensorNameAddress.text = sensorNameLabel
            return true
        }
    }

    private fun setListHeadMeasurementNameOrType(tvMeasurementNameType: TextView): Boolean {
        val measurementNameLabel = getString(R.string.measurement_name)
        if (measurementNameLabel == tvMeasurementNameType.text) {
            tvMeasurementNameType.text = getString(R.string.measurement_type)
            return false
        } else {
            tvMeasurementNameType.text = measurementNameLabel
            return true
        }
    }

    override fun onServiceConnectionCreate(service: DataPrepareService) {
        enableDetectPhysicalSensorNetIn = true
        enableDetectSensorInfoDynamicValueUpdate = true
        enableDetectMeasurementDynamicValueUpdate = true
        enableDetectSensorInfoHistoryValueUpdate = true
        enableDetectMeasurementHistoryValueUpdate = true
    }

//    override fun onServiceConnectionStart(service: DataPrepareService) {
//        super.onServiceConnectionStart(service)
//        storage.refresh(null, null)
////        if (isRealTime()) {
////            enableDetectMeasurementDynamicValueUpdate = true
////        }
//    }

//    override fun onServiceConnectionDestroy(service: DataPrepareService) {
//        if (isRealTime()) {
//            enableDetectPhysicalSensorNetIn = false
//        }
//        //service.dataTransferStation.dynamicSensorDataImportMode = true
//        super.onServiceConnectionDestroy(service)
//    }

//    override fun onDataSourceChange(realTime: Boolean) {
//        super.onDataSourceChange(realTime)
//        val service = getBaseActivity().dataPrepareService ?: return
//        BaseDataBrowseSensorAdapterDelegate.setRealTime(realTime)
//        val transfer = service.dataTransferStation
//        //transfer.dynamicSensorDataImportMode = true
//        enableDetectLogicalSensorNetIn = false
//        //enableDetectLogicalSensorValueUpdate = false
//        if (realTime) {
//            storage.addFilter(FILTER_ID_DATA_SOURCE, SensorHasRealTimeValueFilter<PhysicalSensor>())
//            if (storage.sorter is SensorEarliestValueTimeSorter) {
//                storage.setSorter(SensorNetInTimeSorter(), storage.isAscending)
//            }
//            enableDetectPhysicalSensorNetIn = true
//            //enableDetectPhysicalSensorValueUpdate = true
//            //enableDetectSensorInfoHistoryValueReceive = false
//            //enableDetectMeasurementHistoryValueReceive = false
//            enableDetectSensorInfoDynamicValueUpdate = true
//            enableDetectMeasurementDynamicValueUpdate = true
//            enableDetectSensorInfoHistoryValueUpdate = false
//            enableDetectMeasurementHistoryValueUpdate = false
//        } else {
//            storage.addFilter(FILTER_ID_DATA_SOURCE, SensorOnlyHasHistoryValueFilter<PhysicalSensor>())
//            if (storage.sorter is SensorNetInTimeSorter) {
//                storage.setSorter(SensorEarliestValueTimeSorter(), storage.isAscending)
//            }
//            enableDetectPhysicalSensorNetIn = false
//            //enableDetectPhysicalSensorValueUpdate = false
//            //enableDetectSensorInfoHistoryValueReceive = true
//            //enableDetectMeasurementHistoryValueReceive = true
//            enableDetectSensorInfoDynamicValueUpdate = false
//            enableDetectMeasurementDynamicValueUpdate = false
//            enableDetectSensorInfoHistoryValueUpdate = true
//            enableDetectMeasurementHistoryValueUpdate = true
//            getBaseActivity().dataPrepareService.sensorHistoryDataAccessor.importSensorsWithEarliestValue(this, true)
//        }
//        storage.refresh(null, this)
//    }

    override fun onMissionFinished(result: Boolean) {
        if (!result) {
            val dialog = ConfirmDialog()
            dialog.setTitle(R.string.import_sensor_earliest_value_failed)
            dialog.setDrawCancelButton(false)
            dialog.show(childFragmentManager,
                    "import_sensor_earliest_value_failed")
        }
        //enableDetectMeasurementHistoryValueReceive = false
        //enableDetectMeasurementHistoryValueUpdate = false
    }

//    override fun onDestroy() {
//        //释放配置资源
//        BaseDataBrowseSensorAdapterDelegate.setWarnProcessor(null)
//        super.onDestroy()
//    }

    override fun onPhysicalSensorNetIn(sensor: PhysicalSensor) {
        if (sensor.mainMeasurement.hasHistoryValue()) {
            val onlyAllowedHistoryValue = storage.getFilter(FILTER_ID_DATA_SOURCE) is SensorOnlyHasHistoryValueFilter
            val position = storage.find(sensor, !onlyAllowedHistoryValue, false)
            if (position != -1) {
                if (storage.removeAt(position)) {
                    adapter.notifyItemRemoved(position)
                }
            }
            if (!onlyAllowedHistoryValue) {
                addSensorAndNotify(sensor)
            }
        } else {
            addSensorAndNotify(sensor)
        }
//        if (sensor.info.hasHistoryValue() && storage.contains(sensor, false)) {
//            storage.resort(this)
//        } else {
//            addSensorAndNotify(sensor)
//        }
    }

    private fun addSensorAndNotify(sensor: PhysicalSensor) {
        //根据设置有序添加
        val position = storage.add(sensor)
        if (position >= 0) {
            adapter.notifyItemInserted(position)
            processSensorInsertAtTop(rv_sensors, position)
//            if (BuildConfig.APP_DEBUG) {
//                Log.d(Tag.LOG_TAG_D_TEST, "net in pos: $position, src addr: ${sensor.rawAddress}, dst addr: ${storage.get(position).rawAddress}")
//            }
        }
    }

//    override fun onPhysicalSensorDynamicValueUpdate(sensor: PhysicalSensor, infoValuePosition: Int) {
//        val position = storage.find(sensor)
//        if (position >= 0) {
//            if (BuildConfig.APP_DEBUG) {
//                Log.d(Tag.LOG_TAG_D_TEST, "update pos: $position, src addr: ${sensor.rawAddress}, dst addr: ${storage.get(position).rawAddress}")
//            }
//            adapter.notifyItemChanged(position, UPDATE_TYPE_VALUE_CHANGED)
//            physicalSensorInfoDialog?.notifyRealTimeValueChanged(sensor, infoValuePosition)
//        }
//    }

    override fun onSensorInfoDynamicValueUpdate(info: Sensor.Info, valuePosition: Int) {
        val sensor = SensorManager.getPhysicalSensor(info.id)
        val position = storage.find(sensor)
        if (position >= 0) {
//            if (BuildConfig.APP_DEBUG) {
//                Log.d(Tag.LOG_TAG_D_TEST, "valuePosition: $valuePosition,")
//            }
            adapter.notifyItemChanged(position, UPDATE_TYPE_VALUE_CHANGED)
            //physicalSensorInfoDialog?.notifyRealTimeValueChanged(sensor, valuePosition)
        }
    }

    override fun onMeasurementDynamicValueUpdate(measurement: PracticalMeasurement, valuePosition: Int) {
        val sensor = SensorManager.getPhysicalSensor(measurement.id)
        val position = storage.find(sensor)
        if (position >= 0) {
//            if (BuildConfig.APP_DEBUG) {
//                Log.d(Tag.LOG_TAG_D_TEST, "valuePosition: $valuePosition,")
//            }
            adapter.notifyItemChanged(position, UPDATE_TYPE_VALUE_CHANGED)
            //physicalSensorInfoDialog?.notifyDynamicValueUpdate(sensor, measurement, valuePosition)
        }
    }

    override fun onSensorInfoHistoryValueUpdate(info: Sensor.Info, valuePosition: Int) {
        if (valuePosition == 0) {
            if (info.historyValueContainer.interpretAddResult(valuePosition)
                    == ValueContainer.NEW_VALUE_ADDED) {
                addSensorAndNotify(SensorManager.getPhysicalSensor(info.id))
            }
        }
//        else {
//            physicalSensorInfoDialog?.notifySensorInfoHistoryValueChanged(info, valuePosition)
//        }
    }

    override fun onMeasurementHistoryValueUpdate(measurement: PracticalMeasurement, valuePosition: Int) {
        if (valuePosition == 0) {
            val physicalSensor = SensorManager.getPhysicalSensor(measurement.id.address)
            if (physicalSensor.info.hasHistoryValue()) {
                val position = storage.find(physicalSensor)
                if (position >= 0) {
                    adapter.notifyItemChanged(position, UPDATE_TYPE_VALUE_CHANGED)
                }
            }
        }
        //physicalSensorInfoDialog?.notifyMeasurementHistoryValueChanged(measurement, valuePosition)
    }

//    override fun onImportWarnProcessor() {
//        //super.onImportWarnProcessor()
//        //BaseDataBrowseSensorAdapterDelegate.setWarnProcessor(processor)
//        //SensorInfoAdapter.warnProcessor = processor
//        adapter.notifyItemRangeChanged(0, adapter.itemCount, UPDATE_TYPE_VALUE_CHANGED)
//        //physicalSensorInfoDialog?.notifyWarnProcessorLoaded()
//    }

    override fun onSortButtonClick() {
        SortDialog()
                .addSortType(R.id.rb_address, R.string.address, context)
                .addSortType(R.id.rb_time, R.string.timestamp, context)
                .addSortType(R.id.rb_name, R.string.name, context)
                .setDefaultSelectedId(when (storage.sorter) {
                    is SensorAddressSorter -> R.id.rb_address
                    is SensorNameSorter -> R.id.rb_name
                    else -> R.id.rb_time
                })
                .show(childFragmentManager, DIALOG_TAG_SORT)
    }

    override fun onFilterButtonClick() {
        FilterDialog()
                .addFilterType(getString(R.string.sensor_type),
                        PhysicalSensorTypeFilter.sensorTypeNames,
                        getSensorTypeFilterStates(storage.getFilter(FILTER_ID_SENSOR_TYPE)))
                .apply {
                    addDataSourceFilterType(this)
                    addSensorProtocolFilterType(this)
                }
//                .addFilterType(getString(R.string.sensor_protocol),
//                        resources.getStringArray(R.array.usb_protocols),
//                        when (storage.getFilter(FILTER_ID_SENSOR_PROTOCOL)) {
//                            is BleProtocolFilter -> booleanArrayOf(false, true)
//                            is EsbProtocolFilter -> booleanArrayOf(true, false)
//                            else -> booleanArrayOf(false, false)
//                        })
                .show(childFragmentManager, DIALOG_TAG_FILTER)
    }

    private fun getSensorTypeFilterStates(filter: Filter<PhysicalSensor>?): BooleanArray? {
        if (filter !is PhysicalSensorTypeFilter || filter.selectedSensorTypeNos.isEmpty()) {
            return null
        }
        val result = BooleanArray(PhysicalSensorTypeFilter.sensorTypeNames.size)
        for (selectedSensorTypeNo in filter.selectedSensorTypeNos) {
            result[selectedSensorTypeNo] = true
        }
        return result
    }

    override fun onSortTypeChanged(checkedId: Int, isAscending: Boolean) {
        storage.setSorter(when (checkedId) {
            R.id.rb_address -> SensorAddressSorter()
            R.id.rb_name -> SensorNameSorter()
            R.id.rb_time -> SensorNetInTimeSorter()
            else -> SensorNetInTimeSorter()
        }, isAscending, this)
    }

    override fun onFilterChange(dialog: FilterDialog, hasFilters: BooleanArray, checkedFilterEntryValues: Array<out MutableList<Int>>) {
        //筛选类型
        if (hasFilters[0]) {
            storage.addFilter(FILTER_ID_SENSOR_TYPE, PhysicalSensorTypeFilter(checkedFilterEntryValues[0]))
        } else {
            storage.removeFilter(FILTER_ID_SENSOR_TYPE)
        }

        //筛选数据源
        if (hasFilters[1]) {
            storage.addFilter(FILTER_ID_DATA_SOURCE,
                    if (checkedFilterEntryValues[1][0] == 0) {
                        enableDetectSensorInfoHistoryValueUpdate = false
                        enableDetectMeasurementHistoryValueUpdate = false
                        SensorHasRealTimeValueFilter()
                    } else {
                        enableDetectSensorInfoHistoryValueUpdate = true
                        enableDetectMeasurementHistoryValueUpdate = true
                        SensorOnlyHasHistoryValueFilter()
                    })
        } else {
            enableDetectSensorInfoHistoryValueUpdate = true
            enableDetectMeasurementHistoryValueUpdate = true
            storage.removeFilter(FILTER_ID_DATA_SOURCE)
        }

        //筛选协议
        if (hasFilters[2]) {
            storage.addFilter(FILTER_ID_SENSOR_PROTOCOL,
                    if (checkedFilterEntryValues[2][0] == 0) {
                        EsbProtocolFilter()
                    } else {
                        BleProtocolFilter()
                    })
        } else {
            storage.removeFilter(FILTER_ID_SENSOR_PROTOCOL)
        }

        storage.reFiltrate(this)
    }

    override fun onSearchButtonClick() {
        val dialog = SearchDialog()
        val filter = storage.getFilter(FILTER_ID_SENSOR_INFO)
        if (filter is PhysicalSensorInfoFilter) {
            dialog.setContent(filter.keyWord)
        }
        dialog.show(childFragmentManager, DIALOG_TAG_SEARCH)
    }

    override fun onSearch(target: String?) {
        if (TextUtils.isEmpty(target)) {
            storage.removeFilter(FILTER_ID_SENSOR_INFO)
        } else {
            storage.addFilter(FILTER_ID_SENSOR_INFO, PhysicalSensorInfoFilter(target!!))
        }
        storage.reFiltrate(this)
    }
}